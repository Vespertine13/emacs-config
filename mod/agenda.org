#+STARTUP: content
* Capture and Agenda
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
  (setq org-capture-templates
	'(("t" "TODO" entry (file ORG_CAPTURE)
	   "* TODO %?")
	  ("b" "Bookmark" entry (file ORG_BOOKMARKS)
	   "* %? :bookmark:\n:PROPERTIES:\n:CREATED: %U\n:DOMAIN: \n:NOTE: \n:END:\n")
	  ("d" "Diary" entry (file+olp+datetree ORG_DIARY)
	   "* Dagen i g√•r\n%?")
	  ("e" "Events" entry (file ORG_CAPTURE)
	   "* %? :event:\n:PROPERTIES:\n:DATE: \n:TIME: \n:PLACE: \n:NOTE: \n:END:\n")
	  ("o" "Ordliste" entry (file ORG_ORDLISTE)
	   "* %?")
	  ("h" "Handleliste" entry (file ORG_HANDLELISTE)
	   "* TODO %? :handle: \n:PROPERTIES:\n:ITEMS: \n:CREATED: %U\n:END:\n")
	  ("k" "Kontaktinfo" entry (file ORG_ROLODEX)
	   "* %? :contact:\n:PROPERTIES:\n:EMAIL: \n:TELEPHONE: \n:ORGANIZATION: \n:NOTE: \n:END:\n")
	  ("w" "Watch" entry (file ORG_CAPTURE)
	   "* TODO %? :watch:\n:PROPERTIES:\n:TYPE: \n:GENRE: \n:YEAR: \n:NOTE: \n:END:\n")
	  ("r" "Read" entry (file ORG_CAPTURE)
	   "* TODO %? :read:\n:PROPERTIES:\n:TYPE: \n:GENRE: \n:YEAR: \n:AUTHOR: \n:NOTE: \n:END:\n")
	  ("c" "Code" entry (file ORG_CAPTURE)
	   "* TODO %? :code:\n:PROPERTIES:\n:CREATED: %U\n:LANGUAGE: \n:LIBRARY: \n:NOTE: \n:END:\n")
	  ))
  ;; Org todo workflow
  (setq org-todo-keywords'((sequence "TODO" "|" "DONE")))
  ;; custom command
  (setq org-agenda-custom-commands
	'(("w" "Watch TODOS"
	   tags "+watch+TODO=\"TODO\"")
	  ("r" "Read TODOS"
	   tags "+read+TODO=\"TODO\"")
	  ("c" "Code TODOS"
	   tags "+code+TODO=\"TODO\"")))
  ;; custom function
  (defun open-org-agenda-for-current-week ()
    (interactive)
    (let ((current-prefix-arg '(4)))
      (call-interactively 'org-agenda-list))
    (message "Opening agenda for current week"))
#+end_src
* Daily Todos
#+begin_src emacs-lisp
  ;; functions
  (when (member "Constants" loaded-modules)
    (defun replace-file-contents (file-path new-content)
      "Replace the contents of the FILE-PATH with NEW-CONTENT."
      (with-temp-file file-path
	(insert new-content)))
    (defun create-empty-file (file-path)
	"Create an empty file at FILE-PATH."
	(write-region "" nil file-path))
    (defun file-content-equal-to-string (file string)
      "Check if the content of FILE is equal to STRING."
      (with-temp-buffer
	(insert-file-contents file)
	(string= (buffer-string) string)))
    ;; text and variables
    ;; defines today's date as a variable
    (setq today-scheduled (format-time-string "<%Y-%m-%d %a>"))
    (setq today-var (format-time-string "%Y-%m-%d"))
    (let ((daily-todo1 (format "* TODO Stemple inn\nSCHEDULED: %s\n" today-scheduled))
	  (daily-todo2 (format "* TODO git pull\nSCHEDULED: %s\n" today-scheduled))
	  (daily-todo3 (format "* TODO Sjekk kalender\nSCHEDULED: %s\n" today-scheduled))
	  (daily-todo4 (format "* TODO Skriv dagbok\nSCHEDULED: %s\n" today-scheduled))
	  )
      (setq daily-todos (concat daily-todo1 daily-todo2 daily-todo3 daily-todo4)))

    ;; run checks and replace
    ;; check if today's date file exists, if not it creates an empty file
    (unless (file-exists-p TXT_DATE)
      (create-empty-file TXT_DATE))

    (when (not (file-content-equal-to-string TXT_DATE today-var))
      (replace-file-contents TXT_DATE today-var)
	  (replace-file-contents ORG_DAILY daily-todos))
  )
#+end_src
* loaded-modules
#+begin_src emacs-lisp
  (add-to-list 'loaded-modules "Agenda")
#+end_src

