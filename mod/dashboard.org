#+STARTUP: content

* Modules text
#+begin_src emacs-lisp
    ;; system text
    (setq dash-sys-text (concat "GNU Emacs " emacs-version "/" (symbol-name system-type)))
    ;; check completion and make text
    (let ((n-total-modules (length my-init-modules))
	  (n-loaded-modules (length loaded-modules)))
      (setq mydashtext-1 (format "Loaded Init Modules (%d/%d):\n- " n-loaded-modules n-total-modules)))
    ;; create list of loaded modules
    (setq dashboard-loaded-mods (concat mydashtext-1 (mapconcat 'identity loaded-modules "\n- ")))
    (setq list-missing-mods (cl-remove-if (lambda (item) (member item loaded-modules)) my-init-modules))

    (let ((n-total-modules (length my-init-modules))
	  (n-loaded-modules (length loaded-modules)))
    (if (< n-loaded-modules n-total-modules)
	(setq dashboard-missing-mods (concat "\n\nMissing:\n- "(mapconcat 'identity list-missing-mods "\n- ")))
      (setq dashboard-missing-mods (concat "\n\nMissing:\n" "none"))))

#+end_src
* Dashboard
#+begin_src emacs-lisp
  (require 'dashboard)
  ;; (dashboard-setup-startup-hook)
  ;; Set the banner
  (setq dashboard-startup-banner "~/mega/emacs_utilities/emacs_startup.txt")
  ;; Value can be
  ;; - nil to display no banner
  ;; - 'official which displays the official emacs logo
  ;; - 'logo which displays an alternative emacs logo
  ;; - 1, 2 or 3 which displays one of the text banners
  ;; - "path/to/your/image.gif", "path/to/your/image.png" or "path/to/your/text.txt" which displays whatever gif/image/text you would prefer
  ;; - a cons of '("path/to/your/image.png" . "path/to/your/text.txt")

  ;; put content in centre
  ;; (setq dashboard-center-content t)

  ;; Set the footer
  (setq dashboard-footer-messages (list (concat "Startup at: " (current-time-string))))

  ;; Set the title
  (setq dashboard-banner-logo-title dash-sys-text)
#+end_src
* Custom widget
#+begin_src emacs-lisp
  (defun dashboard-links (list-size)
    (widget-create 'link
		   :notify (lambda (&rest ignore)
			     (deft-folder-deft))
		   :mouse-face 'highlight
		   :follow-link "\C-m"
		   "Home")
    (widget-create 'link
		   :notify (lambda (&rest ignore)
			     (deft-folder-teos))
		   :mouse-face 'highlight
		   :follow-link "\C-m"
		   "Teos")
    (widget-create 'link
		   :notify (lambda (&rest ignore)
			     (find-file "~/emacs-config/mod/dashboard.org"))
		   :mouse-face 'highlight
		   :follow-link "\C-m"
		   "Dashboard Config")
    (widget-create 'link
		   :notify (lambda (&rest ignore)
			     (mastodon))
		   :mouse-face 'highlight
		   :follow-link "\C-m"
		   "Mastodon")
    (widget-create 'link
		   :notify (lambda (&rest ignore)
			     (elfeed))
		   :mouse-face 'highlight
		   :follow-link "\C-m"
		   "Elfeed")
    (widget-create 'link
		   :notify (lambda (&rest ignore)
			     (find-file "~/mega/workout_log.png"))
		   :mouse-face 'highlight
		   :follow-link "\C-m"
		   "Workout Log")

    )

  (defun dashboard-loaded-modules (list-size)
    (insert (concat dashboard-loaded-mods dashboard-missing-mods)))

  (defun dashboard-line (list-size)
    (insert "------------------------------------------------------------------------------------------"))

  (add-to-list 'dashboard-item-generators '(line . dashboard-line))
  (add-to-list 'dashboard-item-generators '(custom-links . dashboard-links))
  (add-to-list 'dashboard-item-generators '(custom-loaded-modules . dashboard-loaded-modules))
  (setq dashboard-items '((custom-loaded-modules) (line) (custom-links)))
#+end_src
* Loaded-modules
#+begin_src emacs-lisp
  (add-to-list 'loaded-modules "dashboard")
#+end_src

