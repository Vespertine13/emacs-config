#+TITLE: Functions
#+STARTUP: overview
* Custom Function
** Misc 
#+begin_src emacs-lisp
  ;; other custom functions
  (defun unhighlight-all ()
    (interactive)
    (unhighlight-regexp t)
    (message "Removed all highlights"))
  (defun save-text-as-file (text filename)
    "Save TEXT as a file named FILENAME."
    (with-temp-buffer
      (insert text)
      (write-file filename))
    (message (format "'%s' saved." filename)))
  (defun replace-file-contents (file-path new-content)
    "Replace the contents of the FILE-PATH with NEW-CONTENT."
    (with-temp-file file-path
      (insert new-content)))
  (defun create-empty-file (file-path)
    "Create an empty file at FILE-PATH."
    (write-region "" nil file-path))
  (defun file-content-equal-to-string (file string)
    "Check if the content of FILE is equal to STRING."
    (with-temp-buffer
      (insert-file-contents file)
      (string= (buffer-string) string)))
  (defun delete-current-file ()
    "Deletes the current file being viewed in the buffer"
    (interactive)
    (let ((filename (buffer-file-name)))
      (when filename
	(if (yes-or-no-p (format "Are you sure you want to delete %s?" filename))
	    (progn
	      (delete-file filename)
	      (message "File '%s' deleted." filename)
	      (kill-buffer))
	  (message "File '%s' not deleted." filename)))))
  ;; Ispell save word
  (defun my-save-word ()
    (interactive)
    (let ((current-location (point))
	  (word (flyspell-get-word)))
      (when (consp word)    
	(flyspell-do-correct 'save nil (car word) current-location (cadr word) (caddr word) current-location))))
#+end_src
** Folders and files shortcuts
#+begin_src emacs-lisp
  (when (member "Constants" loaded-modules)
    (defun open-cloud ()
      (interactive)
      (find-file FOLDER_CLOUD))
    (defun open-org ()
      (interactive)
      (find-file FOLDER_ORG))
    (defun open-bookmarks ()
      (interactive)
      (find-file ORG_BOOKMARKS))
    (defun open-emacs_utilities ()
      (interactive)
      (find-file FOLDER_EMACS_UTILITIES))
    (defun open-config ()
      (interactive)
      (find-file ORG_CONFIG))
    (defun open-timeliste ()
      (interactive)
      (find-file ORG_TIMELISTE))
    (defun open-token ()
      (interactive)
      (find-file ORG_TOKENS)))
  ;; open scratch
  (defun open-scratch ()
    (interactive)
    (switch-to-buffer "*scratch*"))
  ;; open init
  (defun open-init ()
    (interactive)
    (find-file "~/.emacs.d/init.el"))
  ;; open fancy about screen
  (defun open-fancy-about-screen ()
    (interactive)
    (fancy-about-screen))
#+end_src
** Insert/write functions
#+begin_src emacs-lisp
  ;; write functions
  (defun write-current-time ()
    "Writes the current time at the cursor position."
    (interactive)
    (insert (current-time-string)))
  (defun write-current-date ()
    "Writes current date at current position"
    (interactive)
    (insert (format-time-string "%d-%m-%Y")))
  (defun write-current-path ()
    "Writes the path to current buffer at the cursor position."
    (interactive)
    (insert (buffer-file-name)))
  (defun write-read-only ()
    "Write the syntax necessary for activating read only on top of file"
    (interactive)
    (save-excursion
      (goto-char (point-min))
      (insert "# -*- buffer-read-only: t -*-\n")))
  ;; write total time used to calculate flexitid
  (defun write-total-time (days)
    "Calculate the total hours based on DAYS and HOURS-PER-DAY."
    (interactive "nEnter the number of days: ")
    (let ((days 23)
	  (hours (ceiling (* days 7.5))))
      (insert (format "%dd %d:00" (/ hours 24) (% hours 24)))))
#+end_src
** paste fix
A function that can be used to replace æøå with proper encoded æøå.
#+begin_src emacs-lisp
  (defun paste-fix ()
    "Replace characters with specific code points with other letters in the current buffer."
    (interactive)
    (save-excursion
      (goto-char (point-min))
      (while (re-search-forward "[\x3FFF92]" nil t)
	(replace-match "'" nil nil))
      (while (re-search-forward "[\x3FFFE5]" nil t)
	(replace-match "å" nil nil))
      (goto-char (point-min)) ; Reset to the beginning of the buffer
      (while (re-search-forward "[\x3FFFE6]" nil t)
	(replace-match "æ" nil nil))
      (goto-char (point-min)) ; Reset to the beginning of the buffer
      (while (re-search-forward "[\x3FFFF8]" nil t)
	(replace-match "ø" nil nil))
      (goto-char (point-min)) ; Reset to the beginning of the buffer
      (while (re-search-forward "[\x3FFFC5]" nil t)
	(replace-match "Å" nil nil))
      (goto-char (point-min)) ; Reset to the beginning of the buffer
      (while (re-search-forward "[\x3FFFC6]" nil t)
	(replace-match "Æ" nil nil))
      (goto-char (point-min)) ; Reset to the beginning of the buffer
      (while (re-search-forward "[\x3FFFD8]" nil t)
	(replace-match "Ø" nil nil))))
  (add-hook 'before-save-hook 'paste-fix)
#+end_src
** Normal backspace
#+begin_src emacs-lisp
  (defun ryanmarcus/backward-kill-word ()
    "Remove all whitespace if the character behind the cursor is whitespace, otherwise remove a word."
    (interactive)
    (if (looking-back "[ \n]")
	;; delete horizontal space before us and then check to see if we
	;; are looking at a newline
	(progn (delete-horizontal-space 't)
	       (while (looking-back "[ \n]")
		 (backward-delete-char 1)))
      ;; otherwise, just do the normal kill word.
      (backward-kill-word 1)))
#+end_src
** Appearance
#+begin_src emacs-lisp
  ;; Transparent frames
  (defvar-local transparent-frame-enabled nil
    "Flag that indicates if the buffer is transparent.")
  (defun set-frame-solid ()
    (set-frame-parameter (selected-frame) 'alpha-background '100)
    (message "Solid frame"))
  (defun set-frame-transparent ()
    (set-frame-parameter (selected-frame) 'alpha-background '50)
    (message "Transparent frame"))
  (defun toggle-frame-solidity ()
    "Toggle between solid and transparent frame for the current buffer."
    (interactive)
    (setq transparent-frame-enabled (not transparent-frame-enabled))
    (if transparent-frame-enabled
	(set-frame-transparent)
      (set-frame-solid)))
  ;; standard font
  (add-to-list 'default-frame-alist '(font . "Inconsolata-16"))
  ;; tabs
  (custom-set-faces
   '(tab-bar-tab ((t (:inherit default :font "inconsolata" :height 0.8)))))
  ;; appereance related packages
  (when (member "Packages" loaded-modules)
    (defun proper-nyan ()
      (nyan-start-animation)
      (nyan-toggle-wavy-trail))
    (add-hook 'nyan-mode-hook 'proper-nyan)
    (add-hook 'prog-mode-hook 'rainbow-mode)
    (add-hook 'org-mode-hook 'rainbow-mode))
#+end_src
* loaded-modules
#+begin_src emacs-lisp
  (add-to-list 'loaded-modules "Functions")
#+end_src

