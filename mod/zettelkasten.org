#+STARTUP: content
An unholy combination of Org Roam, Deft and Zettelkasten.
Please forgive me gods of emacs.
* Deft and Zetteldeft
** General Settings
#+begin_src emacs-lisp
  (require 'deft)
  (setq deft-extensions '("org"))
  (setq deft-default-extension "org")
  (setq zetteldeft-home-id "20240107102607")
  (setq deft-directory FOLDER_ROAM)
  (setq deft-text-mode 'org-mode)
  (setq deft-use-filename-as-title t)
  (setq deft-use-filter-string-for-filename t)
  (setq deft-auto-save-interval 0)
  (setq deft-file-limit 25)
  (use-package zetteldeft)
#+end_src
** Functions
#+begin_src emacs-lisp
  ;; zetteldeft wander lets you access a random note
  (defun zetteldeft-wander ()
    "Wander through `zetteldeft' notes.
    Search `deft' for a random `zetteldeft' id."
    (interactive)
    (switch-to-buffer deft-buffer)
    (let ((all-files (deft-find-all-files-no-prefix)))
      (deft-filter
	(zetteldeft--lift-id
	 (nth (random (length all-files))
	      all-files)))))
#+end_src
* Org-Roam
** General Settings
#+begin_src emacs-lisp
  (use-package org-roam
    :ensure t
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory FOLDER_ROAM)
    :config
    (org-roam-setup))
  ;; org-roam capture templates
  (setq org-roam-capture-templates
	'(
	  ;; Standard
	  ("s" "Standard" plain
	   "%?"
	   :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
			      ":PROPERTIES:\n:BACKLINK: \n:TAGS: \n:CREATED: %U\n:END:\n#+title: ${title}\n#+STARTUP: content\n")
	   :unnarrowed t)
	  ;; Notes
	  ("n" "Notes" plain
	   "%?"
	   :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
			      ":PROPERTIES:\n:BACKLINK: [[id:47644bb9-9716-44c6-a10b-01964c4cf529][Notes]] \n:TAGS: #notes \n:CREATED: %U\n:END:\n#+title: ${title}\n#+STARTUP: content\n")
	   :unnarrowed t)
	  ;; Work
	  ("o" "OUS" plain
	   "%?"
	   :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
			      ":PROPERTIES:\n:BACKLINK: [[id:a40c3cda-6e61-40f0-b53d-fea162219825][OUS]] \n:TAGS: #ous \n:CREATED: %U\n:END:\n#+title: ${title}\n#+STARTUP: content\n")
	   :unnarrowed t)
	  ;; Code
	  ("c" "Code" plain
	   "%?"
	   :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
			      ":PROPERTIES:\n:BACKLINK: [[id:30c78d9d-2895-4723-b279-9c588f34aed6][Code]] \n:TAGS: #code \n:CREATED: %U\n:LANGUAGE: \n:LIBRARY: \n:END:\n#+title: ${title}\n#+STARTUP: content\n")
	   :unnarrowed t)
	  ;; Emacs
	  ("e" "Emacs" plain
	   "%?"
	   :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
			      ":PROPERTIES:\n:BACKLINK: [[id:3f119e5c-43b0-4773-ab73-c1ee45453e09][Emacs]] \n:TAGS: #emacs \n:CREATED: %U\n:END:\n#+title: ${title}\n#+STARTUP: content\n")
	   :unnarrowed t)
	  ;; Bioinformatics
	  ("b" "Bioinformatics" plain
	   "%?"
	   :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
			      ":PROPERTIES:\n:BACKLINK: [[id:56484c3a-e69b-42e7-984a-265eb69ed635][Bioinformatics]] \n:TAGS: #notes #bioinformatics \n:CREATED: %U\n:END:\n#+title: ${title}\n#+STARTUP: content\n")
	   :unnarrowed t)
	  ;; Teos
	  ("t" "Teos" plain
	   "%?"
	   :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
			      ":PROPERTIES:\n:BACKLINK: [[id:a9eea227-1915-4c38-ae40-65b01a33328c][Teos]] \n:TAGS: #teos \n:CREATED: %U\n:END:\n#+title: ${title}\n#+STARTUP: content\n")
	   :unnarrowed t)
	  ;; DnD
	  ("d" "DnD" plain
	   "%?"
	   :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
			      ":PROPERTIES:\n:BACKLINK: [[id:284c9904-1342-4361-97be-fd688ce23514][DnD]] \n:TAGS: #dnd \n:CREATED: %U\n:END:\n#+title: ${title}\n#+STARTUP: content\n")
	   :unnarrowed t)
	  ;; Lurkwoods Skjebne
	  ("x" "Lurkwoods Skjebne" plain
	   "%?"
	   :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
			      ":PROPERTIES:\n:BACKLINK: [[id:20c1f6f3-2e69-4637-aff4-af6e5895f837][Lurkwoods Skjebne]] \n:TAGS: #dnd #lurkwoodsskjebne \n:CREATED: %U\n:END:\n#+title: ${title}\n#+STARTUP: content\n")
	   :unnarrowed t)
	  ;; Read
	  ("r" "Read" plain
	   "%?"
	   :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
			      ":PROPERTIES:\n:BACKLINK: [[id:433ac683-afbd-44bd-b1af-ffacf9801d44][Literature]] \n:TAGS: #notes #read \n:CREATED: %U\n:TYPE: \n:GENRE: \n:YEAR: \n:AUTHOR: \n:END:\n#+title: ${title}\n#+STARTUP: content\n")
	   :unnarrowed t)
	  ;; Watch
	  ("w" "Watch" plain
	   "%?"
	   :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
			      ":PROPERTIES:\n:BACKLINK: [[id:f06f0cf8-a3ea-4c7d-9007-aaac0c0a35ae][Video]] \n:TAGS: #notes #watch \n:CREATED: %U\n:TYPE: \n:GENRE: \n:YEAR: \n:END:\n#+title: ${title}\n#+STARTUP: content\n")
	   :unnarrowed t)
	  ;; Listen
	  ("l" "Listen" plain
	   "%?"
	   :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
			      ":PROPERTIES:\n:BACKLINK: [[id:b0c15b68-cf92-4804-a3c0-8c2906623e55][Music]] \n:TAGS: #notes #listen \n:CREATED: %U\n:TYPE: \n:GENRE: \n:YEAR: \n:Artist: \n:END:\n#+title: ${title}\n#+STARTUP: content\n")
	   :unnarrowed t)
	  ))
#+end_src
** Functions
#+begin_src emacs-lisp
  (defun roam-home ()
    (interactive)
    (deft)
    (deft-refresh)
    (org-roam-update-org-id-locations)
    (zetteldeft-go-home)
    )
#+end_src
** Keybindings
Overwrite some of the zetteldeft keybinding with new ones suiting org-roam
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c d l")  'org-roam-buffer-toggle)
  (global-set-key (kbd "C-c d f")  'org-roam-node-find)
  (global-set-key (kbd "C-c d i")  'org-roam-node-insert)
  (global-set-key (kbd "C-c d u") 'org-roam-ui-mode)
  (global-set-key (kbd "C-c d c")  'org-id-get-create)
  (global-set-key (kbd "C-c d d")  'zetteldeft-deft-new-search)
  (global-set-key (kbd "C-c d h")  'zetteldeft-go-home)
  (global-set-key (kbd "C-c d r")  'deft-refresh)
  (global-set-key (kbd "C-c d s")  'zetteldeft-search-at-point)
  (global-set-key (kbd "C-c d t")  'zetteldeft-tag-buffer)
  (global-set-key (kbd "C-c d w")  'zetteldeft-wander)
  (global-set-key (kbd "C-c d x")  'zetteldeft-count-words)
#+end_src

** Initialize
#+begin_src emacs-lisp
  (roam-home) 
#+end_src
* loaded-modules
#+begin_src emacs-lisp
  (add-to-list 'loaded-modules "Zettelkasten")
#+end_src

