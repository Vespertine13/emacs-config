* R settings
#+begin_src emacs-lisp
  ;; checks the system name and sets an R path accordingly
  (when (eq system-type 'windows-nt)
    (setq inferior-R-program-name EXE_R))
  ;; (setq inferior-R-program-name '(
  ;; Shut up compile saves
  (setq compilation-ask-about-save nil)
  ;; shut up auto ask
  (setq ess-ask-for-ess-directory nil)
  (setq ess-startup-directory nil)
  ;; Don't save *anything*
  (setq compilation-save-buffers-predicate '(lambda () nil))
  ;;; ESS
  (defun my-ess-hook ()
    ;; ensure company-R-library is in ESS backends
    (make-local-variable 'company-backends)
    (cl-delete-if (lambda (x) (and (eq (car-safe x) 'company-R-args))) company-backends)
    (push (list 'company-R-args 'company-R-objects 'company-R-library :separate)
      company-backends))
  (add-hook 'ess-mode-hook 'my-ess-hook)
  (with-eval-after-load 'ess
    (setq ess-use-company t))
  ;; company
  (require 'company)
  (setq tab-always-indent 'complete)
  (global-set-key (kbd "C-M-/") #'company-complete)
  (global-company-mode)
  ;; hotkeys
  (global-set-key (kbd "M--") " <- ")    ;; alt+-
  (global-set-key (kbd "C-S-M") " %>% ") ;; control+shift+m
  ;; run script function
  (defun run-r-script (script-path)
    (shell-command (concat "Rscript " (shell-quote-argument script-path))))
#+end_src
* loaded-modules
#+begin_src emacs-lisp
  (add-to-list 'loaded-modules "R")
#+end_src
