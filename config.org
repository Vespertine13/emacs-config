# -*- buffer-read-only: t -*-
#+STARTUP: content

Eivind Kjeka Broen
eivind.kb@hotmail.com

* Init Setup
The init.el (path ~/.emacs.d/init.el) file will redirect to this file if it contains the following code: 
(org-babel-load-file "~/emacs-config/config.org")

* Configuration
** Basic Customization
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)    ;; Hide the startup message
  (setq debug-on-error t)             ;; enable in-depth message on error
  (setq ring-bell-function 'ignore)   ;; ignore annoying bell sounds while in emacs
  (tool-bar-mode -1)                  ;; removes ugly tool bar
  (menu-bar-mode -1)                  ;; removes menubar
#+end_src
** Encoding
#+begin_src emacs-lisp
  (set-language-environment "utf-8")
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (setq-default buffer-file-coding-system 'utf-8)
#+end_src
** Loading Modules
#+begin_src emacs-lisp
  ;; set expected modules
  (setq my-init-modules '("Dashboard" "Keybinding" "Experimental" "Emojis" "Pandoc" "Themes" "Python" "R" "Agenda" "Zettelkasten" "Teos" "Packages" "Constants" "Elfeed"))
  ;; make a list of loaded modules
  (setq loaded-modules ())
  ;; loading constants 
  (ignore-errors (org-babel-load-file "~/mega/emacs_utilities/config/constants.org"))
  ;; loading packages
  (ignore-errors (org-babel-load-file "~/emacs-config/mod/packages.org"))
  ;; loading teos
  (ignore-errors (org-babel-load-file "~/mega/emacs_utilities/config/teos.org"))
  ;; loading zettelkasten
  (ignore-errors (org-babel-load-file "~/emacs-config/mod/zettelkasten.org"))
  ;; loading agenda
  (ignore-errors (org-babel-load-file "~/emacs-config/mod/agenda.org"))
  ;; loading R
  (ignore-errors (org-babel-load-file "~/emacs-config/mod/R.org"))
  ;; loading python
  (ignore-errors (org-babel-load-file "~/emacs-config/mod/python.org"))
  ;; loading themes
  (ignore-errors (org-babel-load-file "~/emacs-config/mod/themes.org"))
  ;; loading pandoc
  (ignore-errors (org-babel-load-file "~/emacs-config/mod/pandoc.org"))
  ;; loading emojis
  (ignore-errors (org-babel-load-file "~/mega/emacs_utilities/config/emojis.org"))
  ;; loading elfeed
  (ignore-errors (org-babel-load-file "~/mega/emacs_utilities/config/elfeed.org"))
  ;; experimental
  (ignore-errors (org-babel-load-file "~/mega/emacs_utilities/config/experimental.org"))
  ;; loading keybinding
  (ignore-errors (org-babel-load-file "~/emacs-config/mod/keybinding.org"))
  ;; Loading dashboard
  (ignore-errors (org-babel-load-file "~/emacs-config/mod/dashboard.org"))
#+end_src
** Basic Setup
(print loaded-modules)
*** Text and Writing
#+begin_src emacs-lisp
  ;; Electric pair for closing parentheses etc
  (electric-pair-mode t)
  ;; Linum mode
  (global-display-line-numbers-mode t)
  ;; hide emphasis markers (bold, italics etc)
  (setq org-hide-emphasis-markers t)
  ;; sentences does not end in double space anymore
  (setq sentence-end-double-space nil)
  ;; when something is selected it will now be deleted if typed over
  (delete-selection-mode t)
#+end_src
*** Time
#+begin_src emacs-lisp
  (setq-default org-display-custom-times t)
  (setq org-time-stamp-custom-formats '("<%e.%m.%Y>" . "<%e.%m.%Y %H:%M>"))
#+end_src
*** Auto Revert
#+begin_src emacs-lisp
  ;; files reload from disc when reopened
  (global-auto-revert-mode t)
  ;; dired automatically updates  
  (setq dired-auto-revert-buffer t)
#+end_src

*** Backup
#+begin_src emacs-lisp
(when (member "Constants" loaded-modules)
  (setq backup-directory-alist
    `((".*" . ,FOLDER_TEMP)))
  (setq auto-save-file-name-transforms
    `((".*" ,FOLDER_TEMP t)))
  (setq temporary-file-directory
    FOLDER_TEMP))
#+end_src
*** ORG
#+begin_src emacs-lisp
  (require 'org)
  (electric-indent-mode -1)       ;; disables electric indent mode
  (setq org-log-done t)
  ;; RETURN will follow links in org-mode files
  (setq org-return-follows-link  t)
  ;; remove stupid indent
  (setq org-adapt-indentation nil)
     ;; enable tag inheritance
     (setq org-use-tag-inheritance t)
  ;; images
  (setq org-image-actual-width nil) ;; do not display images in actual size
  ;; enables pictures in org files
  (defun org-show-images ()
    (interactive)
    (message "Show images")
    (org-toggle-inline-images t)
    )
  (add-hook 'org-mode-hook 'org-show-images)
  ;; inserts a image in org syntax given path
  (defun org-insert-image (image-path)
    "Insert standardized image text for org given path."
    (interactive "FPath to image: ") ; "F" specifies a file path input
    (insert "#+ATTR_ORG: :width 500\n[[" image-path "]]"))
  ;; dynamic blocks
  (add-hook 'org-mode-hook 'org-update-all-dblocks)
     (add-hook 'before-save-hook 'org-update-all-dblocks)
  ;; org agenda files
  (when (member "Constants" loaded-modules)
    (setq org-agenda-files FOLDER_ORG_LIST))
  ;; related custom functins
  (defun checkbox-all ()
    (interactive)
    (mark-whole-buffer)
    (org-toggle-checkbox)
    (message "check/uncheck all"))
  ;; hide leading stars in org mode
  (setq org-hide-leading-stars 1)
  ;; shift select
  (setq org-support-shift-select 1)
#+end_src
*** Eshell
#+begin_src emacs-lisp
  (add-hook 'eshell-mode-hook
	    (lambda ()
	      (remove-hook 'completion-at-point-functions 'pcomplete-completions-at-point t)))
  (setenv "LANG" "en_US.UTF-8")
  (setq eshell-scroll-to-bottom-on-input t)
#+end_src
*** Scratch
#+begin_src emacs-lisp
  ;; input variable into scratch
  (setq initial-scratch-message "")
#+end_src
*** Calendar
#+begin_src emacs-lisp
  (copy-face font-lock-constant-face 'calendar-iso-week-face)
  (set-face-attribute 'calendar-iso-week-face nil
		      :height 0.7)
  (setq calendar-intermonth-text
	'(propertize
	  (format "%2d"
		  (car
		   (calendar-iso-from-absolute
		    (calendar-absolute-from-gregorian (list month day year)))))
	  'font-lock-face 'calendar-iso-week-face))
  (add-hook 'calendar-load-hook
	    (lambda ()
	  (calendar-set-date-style 'european)))
  (setq calendar-week-start-day 1)
#+end_src
*** Timer
#+begin_src emacs-lisp
  (when (member "Constants" loaded-modules)
    (setq org-clock-sound WAV_BELL))
#+end_src
*** Garbage Collection
#+begin_src emacs-lisp
  ;; Minimize garbage collection during startup
  (setq gc-cons-threshold most-positive-fixnum)
  ;; Lower threshold back to 8 MiB (default is 800kB)
  (add-hook 'emacs-startup-hook
	(lambda ()
	  (setq gc-cons-threshold (expt 2 23))))
#+end_src

*** Appearance
#+begin_src emacs-lisp
  ;; Transparent frames
  (defvar-local transparent-frame-enabled nil
    "Flag that indicates if the buffer is transparent.")
  (defun set-frame-solid ()
    (set-frame-parameter (selected-frame) 'alpha '(100 100))
    (message "Solid frame"))
  (defun set-frame-transparent ()
    (set-frame-parameter (selected-frame) 'alpha '(70 70))
    (message "Transparent frame"))
  (defun toggle-frame-solidity ()
    "Toggle between solid and transparent frame for the current buffer."
    (interactive)
    (setq transparent-frame-enabled (not transparent-frame-enabled))
    (if transparent-frame-enabled
	(set-frame-transparent)
      (set-frame-solid)))
  ;; tabs
  (custom-set-faces
   '(tab-bar-tab ((t (:inherit default :font "inconsolata" :height 0.8)))))
  ;; appereance related packages
  (when (member "Packages" loaded-modules)
    (defun proper-nyan ()
      (nyan-start-animation)
      (nyan-toggle-wavy-trail))
    (add-hook 'nyan-mode-hook 'proper-nyan)
    (add-hook 'prog-mode-hook 'rainbow-mode)
    (add-hook 'org-mode-hook 'rainbow-mode))
#+end_src
*** Fonts
#+begin_src emacs-lisp
  ;; fonts need to be manually installed
  (defun font-inconsolata ()
    (interactive)
    (setq buffer-face-mode-face '(:family "Inconsolata")) ;; standard font find it in ~/mega/fonts
    (buffer-face-mode))
  (defun font-courier ()
    (interactive)
    (setq buffer-face-mode-face '(:family "Courier"))
    (buffer-face-mode))
  (defun font-iosevka ()
    (interactive)
    (setq buffer-face-mode-face '(:family "Iosevka"))
    (buffer-face-mode))
  (defun font-robotomono ()
    (interactive)
    (setq buffer-face-mode-face '(:family "Roboto Mono"))
    (buffer-face-mode))
  (defun font-vcrosdmono()
    (interactive)
    (setq buffer-face-mode-face '(:family "VCR OSD Mono"))
    (buffer-face-mode))
#+end_src
*** paste fix
A function that can be used to replace æøå with proper encoded æøå.
#+begin_src emacs-lisp
  (defun paste-fix ()
    "Replace characters with specific code points with other letters in the current buffer."
    (interactive)
    (save-excursion
      (goto-char (point-min))
      (while (re-search-forward "[\x3FFF92]" nil t)
	(replace-match "'" nil nil))
      (while (re-search-forward "[\x3FFFE5]" nil t)
	(replace-match "å" nil nil))
      (goto-char (point-min)) ; Reset to the beginning of the buffer
      (while (re-search-forward "[\x3FFFE6]" nil t)
	(replace-match "æ" nil nil))
      (goto-char (point-min)) ; Reset to the beginning of the buffer
      (while (re-search-forward "[\x3FFFF8]" nil t)
	(replace-match "ø" nil nil))
      (goto-char (point-min)) ; Reset to the beginning of the buffer
      (while (re-search-forward "[\x3FFFC5]" nil t)
	(replace-match "Å" nil nil))
      (goto-char (point-min)) ; Reset to the beginning of the buffer
      (while (re-search-forward "[\x3FFFC6]" nil t)
	(replace-match "Æ" nil nil))
      (goto-char (point-min)) ; Reset to the beginning of the buffer
      (while (re-search-forward "[\x3FFFD8]" nil t)
	(replace-match "Ø" nil nil))))
  (add-hook 'before-save-hook 'paste-fix)
#+end_src
*** Undo-tree
#+begin_src emacs-lisp
  (when (and (member "Packages" loaded-modules) (member "Constants" loaded-modules))
    (require 'undo-tree)
    (global-undo-tree-mode)
    (setq undo-tree-history-directory-alist
      '(("." . "~/.emacs.d/undo-tree-history/")))
    )
#+end_src
*** ERC
#+begin_src emacs-lisp
  (when (member "Constants" loaded-modules)
    (defun run-libera-chat ()
      (interactive)
      (erc-tls :server "irc.libera.chat" :port 6697 :nick NICK_ERC :password )))
#+end_src
*** Custom Function
#+begin_src emacs-lisp
  ;; folders and files
  (when (member "Constants" loaded-modules)
    (defun open-mega ()
      (interactive)
      (find-file FOLDER_MEGA))
    (defun open-org ()
      (interactive)
      (find-file FOLDER_ORG))
    (defun open-bookmarks ()
      (interactive)
      (find-file ORG_BOOKMARKS))
    (defun open-emacs_utilities ()
      (interactive)
      (find-file FOLDER_EMACS_UTILITIES))
    ;; open config
    (defun open-config ()
      (interactive)
      (find-file ORG_CONFIG))
    (defun open-token ()
      (interactive)
      (find-file ORG_TOKENS)))
  ;; open scratch
  (defun open-scratch ()
    (interactive)
    (switch-to-buffer "*scratch*"))
  ;; other custom functions
  (defun unhighlight-all ()
    (interactive)
    (unhighlight-regexp t)
    (message "Removed all highlights"))
  (defun save-text-as-file (text filename)
  "Save TEXT as a file named FILENAME."
  (with-temp-buffer
     (insert text)
     (write-file filename))
     (message (format "'%s' saved." filename)))
  (defun replace-file-contents (file-path new-content)
    "Replace the contents of the FILE-PATH with NEW-CONTENT."
    (with-temp-file file-path
      (insert new-content)))
  (defun create-empty-file (file-path)
    "Create an empty file at FILE-PATH."
    (write-region "" nil file-path))
  (defun file-content-equal-to-string (file string)
      "Check if the content of FILE is equal to STRING."
      (with-temp-buffer
	(insert-file-contents file)
	(string= (buffer-string) string)))
  (defun delete-current-file ()
    "Deletes the current file being viewed in the buffer"
    (interactive)
    (let ((filename (buffer-file-name)))
      (when filename
    (if (yes-or-no-p (format "Are you sure you want to delete %s?" filename))
	(progn
	  (delete-file filename)
	  (message "File '%s' deleted." filename)
	  (kill-buffer))
      (message "File '%s' not deleted." filename)))))
  (defun backward-kill-word-or-whitespace ()
    "Remove all whitespace if the character behind the cursor is whitespace, otherwise remove a word."
    (interactive)
    (if (looking-back "\\s-")
    (progn
      (delete-region (point) (save-excursion (skip-chars-backward " \t\n") (point))))
      (backward-kill-word 1)))
  ;; write functions
  (defun write-current-time ()
    "Writes the current time at the cursor position."
    (interactive)
    (insert (current-time-string)))
  (defun write-current-date ()
    "Writes current date at current position"
    (interactive)
    (insert (format-time-string "%d-%m-%Y")))
  (defun write-current-path ()
    "Writes the path to current buffer at the cursor position."
    (interactive)
    (insert (buffer-file-name)))
  (defun write-read-only ()
    "Write the syntax necessary for activating read only on top of file"
    (interactive)
    (save-excursion
      (goto-char (point-min))
      (insert "# -*- buffer-read-only: t -*-\n")))
#+end_src
*** Mastodon
#+begin_src emacs-lisp
  (when (member "Packages" loaded-modules)
    (setq mastodon-instance-url "https://tech.lgbt"
      mastodon-active-user "gray")
    (defun my-mastodon-hook ()
      (emojify-mode t)
      (visual-line-mode t))
    (add-hook 'mastodon-mode-hook 'my-mastodon-hook))
#+end_src
*** Startup
#+begin_src emacs-lisp
  (when (member "Themes" loaded-modules)
    (set-day-night-theme))
  (cd "~/")
  (open-scratch)
  (when (member "Zettelkasten" loaded-modules)
      (deft)
      (roam-home))
  (dashboard-open)
#+end_src

