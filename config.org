# -*- buffer-read-only: t -*-
#+STARTUP: content

Eivind Kjeka Broen
eivind.kb@hotmail.com

* Init Setup
The init.el (path ~/.emacs.d/init.el) file will redirect to this file if it contains the following code: 
(org-babel-load-file "~/emacs-config/config.org")

* Configuration
** Basic Customization
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)    ;; Hide the startup message
  (setq debug-on-error t)             ;; enable in-depth message on error
  (setq ring-bell-function 'ignore)   ;; ignore annoying bell sounds while in emacs
  (tool-bar-mode -1)                  ;; removes ugly tool bar
  (menu-bar-mode -1)                  ;; removes menubar
#+end_src
** Encoding
#+begin_src emacs-lisp
  (set-language-environment "utf-8")
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (setq-default buffer-file-coding-system 'utf-8)
#+end_src
** Loading Modules
#+begin_src emacs-lisp
      ;; Function to load a module and measure the time
      (setq loaded-modules-with-time ())
  (defun load-module-and-measure-time (module file)
    (let* ((start-time (current-time))
	   (result (ignore-errors (org-babel-load-file file)))
	   (end-time (current-time))
	   (elapsed-time (if result (float-time (time-subtract end-time start-time)) 0.0))
	   (formatted-string (format "%.3fs - %s" elapsed-time module)))
      (if (member formatted-string loaded-modules-with-time)
	  loaded-modules-with-time
	(if (> elapsed-time 0)
	    (setq loaded-modules-with-time (cons formatted-string loaded-modules-with-time))
	  loaded-modules-with-time))))
      ;; Set expected modules
      (setq my-init-modules '("Keybinding" "Experimental" "Functions" "EMMS" "ERC" "Mastodon" "Elfeed" "Emojis" "Pandoc" "Themes" "Python" "R" "Company" "Agenda" "Zettelkasten" "Teos" "Packages" "Constants"))
      ;; Make a list of loaded modules
      (setq loaded-modules ())
      ;; Loading modules
      (load-module-and-measure-time "Constants" "~/mega/emacs_utilities/config/constants.org")
      (load-module-and-measure-time "Packages" "~/emacs-config/mod/packages.org")
      (load-module-and-measure-time "Teos" "~/mega/emacs_utilities/config/teos.org")
      (load-module-and-measure-time "Zettelkasten" "~/emacs-config/mod/zettelkasten.org")
      (load-module-and-measure-time "Agenda" "~/emacs-config/mod/agenda.org")
      (load-module-and-measure-time "Company" "~/emacs-config/mod/company.org")
      (load-module-and-measure-time "R" "~/emacs-config/mod/R.org")
      (load-module-and-measure-time "Python" "~/emacs-config/mod/python.org")
      (load-module-and-measure-time "Themes" "~/emacs-config/mod/themes.org")
      (load-module-and-measure-time "Pandoc" "~/emacs-config/mod/pandoc.org")
      (load-module-and-measure-time "Emojis" "~/mega/emacs_utilities/config/emojis.org")
      (load-module-and-measure-time "Elfeed" "~/mega/emacs_utilities/config/elfeed.org")
      (load-module-and-measure-time "Mastodon" "~/emacs-config/mod/mastodon.org")
      (load-module-and-measure-time "ERC" "~/emacs-config/mod/erc.org")
      (load-module-and-measure-time "EMMS" "~/emacs-config/mod/emms.org")
      (load-module-and-measure-time "Functions" "~/emacs-config/mod/functions.org")
      (load-module-and-measure-time "Experimental" "~/mega/emacs_utilities/config/experimental.org")
      (load-module-and-measure-time "Keybinding" "~/emacs-config/mod/keybinding.org")
#+end_src
** Basic Setup

*** Text and Writing
#+begin_src emacs-lisp
  ;; Electric pair for closing parentheses etc
  (electric-pair-mode t)
  ;; Linum mode
  (global-display-line-numbers-mode t)
  ;; hide emphasis markers (bold, italics etc)
  (setq org-hide-emphasis-markers t)
  ;; sentences does not end in double space anymore
  (setq sentence-end-double-space nil)
  ;; when something is selected it will now be deleted if typed over
  (delete-selection-mode t)
#+end_src
**** Flyspell
#+begin_src emacs-lisp
  (when (string= system-type "gnu/linux")
    (add-hook 'text-mode-hook 'flyspell-mode)
    (add-hook 'prog-mode-hook 'flyspell-prog-mode)
    (eval-after-load "flyspell"
      '(define-key flyspell-mode-map (kbd "C-.") nil)))
#+end_src
*** Time
#+begin_src emacs-lisp
  (setq-default org-display-custom-times t)
  (setq org-time-stamp-custom-formats '("<%e.%m.%Y>" . "<%e.%m.%Y %H:%M>"))
#+end_src
*** Auto Revert
#+begin_src emacs-lisp
  ;; files reload from disc when reopened
  (global-auto-revert-mode t)
  ;; dired automatically updates  
  (setq dired-auto-revert-buffer t)
#+end_src

*** Backup
#+begin_src emacs-lisp
(when (member "Constants" loaded-modules)
  (setq backup-directory-alist
    `((".*" . ,FOLDER_TEMP)))
  (setq auto-save-file-name-transforms
    `((".*" ,FOLDER_TEMP t)))
  (setq temporary-file-directory
    FOLDER_TEMP))
#+end_src
*** ORG
#+begin_src emacs-lisp
  (require 'org)
  (electric-indent-mode -1)       ;; disables electric indent mode
  (setq org-log-done t)
  ;; RETURN will follow links in org-mode files
  (setq org-return-follows-link  t)
  ;; remove stupid indent
  (setq org-adapt-indentation nil)
     ;; enable tag inheritance
     (setq org-use-tag-inheritance t)
  ;; images
  (setq org-image-actual-width nil) ;; do not display images in actual size
  ;; enables pictures in org files
  (defun org-show-images ()
    (interactive)
    (message "Show images")
    (org-toggle-inline-images t)
    )
  (add-hook 'org-mode-hook 'org-show-images)
  ;; inserts a image in org syntax given path
  (defun org-insert-image (image-path)
    "Insert standardized image text for org given path."
    (interactive "FPath to image: ") ; "F" specifies a file path input
    (insert "#+ATTR_ORG: :width 500\n[[" image-path "]]"))
  ;; dynamic blocks
  (add-hook 'org-mode-hook 'org-update-all-dblocks)
     (add-hook 'before-save-hook 'org-update-all-dblocks)
  ;; org agenda files
  (when (member "Constants" loaded-modules)
    (setq org-agenda-files FOLDER_ORG_LIST))
  ;; related custom functins
  (defun checkbox-all ()
    (interactive)
    (mark-whole-buffer)
    (org-toggle-checkbox)
    (message "check/uncheck all"))
  ;; hide leading stars in org mode
  (setq org-hide-leading-stars 1)
  ;; shift select
  (setq org-support-shift-select 1)
#+end_src
*** Eshell
#+begin_src emacs-lisp
  (add-hook 'eshell-mode-hook
	    (lambda ()
	      (remove-hook 'completion-at-point-functions 'pcomplete-completions-at-point t)))
  (setenv "LANG" "en_US.UTF-8")
  (setq eshell-scroll-to-bottom-on-input t)
#+end_src
*** Scratch
#+begin_src emacs-lisp
  ;; input variable into scratch
  (setq initial-scratch-message "")
#+end_src
*** Calendar
#+begin_src emacs-lisp
  (copy-face font-lock-constant-face 'calendar-iso-week-face)
  (set-face-attribute 'calendar-iso-week-face nil
		      :height 0.7)
  (setq calendar-intermonth-text
	'(propertize
	  (format "%2d"
		  (car
		   (calendar-iso-from-absolute
		    (calendar-absolute-from-gregorian (list month day year)))))
	  'font-lock-face 'calendar-iso-week-face))
  (add-hook 'calendar-load-hook
	    (lambda ()
	  (calendar-set-date-style 'european)))
  (setq calendar-week-start-day 1)
#+end_src
*** Timer
#+begin_src emacs-lisp
  (when (member "Constants" loaded-modules)
    (setq org-clock-sound WAV_BELL))
#+end_src
*** Garbage Collection
#+begin_src emacs-lisp
  ;; Minimize garbage collection during startup
  (setq gc-cons-threshold most-positive-fixnum)
  ;; Lower threshold back to 8 MiB (default is 800kB)
  (add-hook 'emacs-startup-hook
	(lambda ()
	  (setq gc-cons-threshold (expt 2 23))))
#+end_src

*** Appearance
#+begin_src emacs-lisp
  ;; Transparent frames
  (defvar-local transparent-frame-enabled nil
    "Flag that indicates if the buffer is transparent.")
  (defun set-frame-solid ()
    (set-frame-parameter (selected-frame) 'alpha-background '100)
    (message "Solid frame"))
  (defun set-frame-transparent ()
    (set-frame-parameter (selected-frame) 'alpha-background '50)
    (message "Transparent frame"))
  (defun toggle-frame-solidity ()
    "Toggle between solid and transparent frame for the current buffer."
    (interactive)
    (setq transparent-frame-enabled (not transparent-frame-enabled))
    (if transparent-frame-enabled
	(set-frame-transparent)
      (set-frame-solid)))
  ;; standard font
  (add-to-list 'default-frame-alist '(font . "Inconsolata-16"))
  ;; tabs
  (custom-set-faces
   '(tab-bar-tab ((t (:inherit default :font "inconsolata" :height 0.8)))))
  ;; appereance related packages
  (when (member "Packages" loaded-modules)
    (defun proper-nyan ()
      (nyan-start-animation)
      (nyan-toggle-wavy-trail))
    (add-hook 'nyan-mode-hook 'proper-nyan)
    (add-hook 'prog-mode-hook 'rainbow-mode)
    (add-hook 'org-mode-hook 'rainbow-mode))
#+end_src
*** Fonts
#+begin_src emacs-lisp
  ;; fonts need to be manually installed
  (defun font-inconsolata ()
    (interactive)
    (setq buffer-face-mode-face '(:family "Inconsolata")) ;; standard font find it in ~/mega/fonts
    (buffer-face-mode))
  (defun font-courier ()
    (interactive)
    (setq buffer-face-mode-face '(:family "Courier"))
    (buffer-face-mode))
  (defun font-iosevka ()
    (interactive)
    (setq buffer-face-mode-face '(:family "Iosevka"))
    (buffer-face-mode))
  (defun font-robotomono ()
    (interactive)
    (setq buffer-face-mode-face '(:family "Roboto Mono"))
    (buffer-face-mode))
  (defun font-vcrosdmono()
    (interactive)
    (setq buffer-face-mode-face '(:family "VCR OSD Mono"))
    (buffer-face-mode))
#+end_src
*** Undo-tree
#+begin_src emacs-lisp
  (when (and (member "Packages" loaded-modules) (member "Constants" loaded-modules))
    (require 'undo-tree)
    (global-undo-tree-mode)
    (setq undo-tree-history-directory-alist
      '(("." . "~/.emacs.d/undo-tree-history/")))
    )
#+end_src
*** Dashboard

**** Modules text
#+begin_src emacs-lisp
    ;; system text
    (setq dash-sys-text (concat "GNU Emacs " emacs-version "|" (symbol-name system-type)))
    ;; check completion and make text
    (let ((n-total-modules (length my-init-modules))
	  (n-loaded-modules (length loaded-modules)))
      (setq mydashtext-1 (format " LOADED INIT MODULES (%d/%d):\n\n    " n-loaded-modules n-total-modules)))
    ;; create list of loaded modules
    (setq loaded-modules-with-time (reverse loaded-modules-with-time))
    (setq dashboard-loaded-mods (concat mydashtext-1 (mapconcat 'identity loaded-modules-with-time "\n    ")))
    (setq list-missing-mods (cl-remove-if (lambda (item) (member item loaded-modules)) my-init-modules))

    (let ((n-total-modules (length my-init-modules))
	  (n-loaded-modules (length loaded-modules)))
    (if (< n-loaded-modules n-total-modules)
	(setq dashboard-missing-mods (concat "\n\n MISSING:\n\n    "(mapconcat 'identity list-missing-mods "\n    ")))
      (setq dashboard-missing-mods "")))


#+end_src
**** Dashboard
#+begin_src emacs-lisp
  (require 'dashboard)
  ;; (dashboard-setup-startup-hook)
  ;; Set the banner
  (setq dashboard-startup-banner "~/mega/emacs_utilities/emacs_startup.txt")
  ;; Value can be
  ;; - nil to display no banner
  ;; - 'official which displays the official emacs logo
  ;; - 'logo which displays an alternative emacs logo
  ;; - 1, 2 or 3 which displays one of the text banners
  ;; - "path/to/your/image.gif", "path/to/your/image.png" or "path/to/your/text.txt" which displays whatever gif/image/text you would prefer
  ;; - a cons of '("path/to/your/image.png" . "path/to/your/text.txt")

  ;; put content in centre
  ;; (setq dashboard-center-content t)

  ;; Set the footer
  (setq dashboard-footer-messages (list (concat "Startup at: " (current-time-string))))

  ;; Set the title
  (setq dashboard-banner-logo-title dash-sys-text)
#+end_src
**** Customization
#+begin_src emacs-lisp
  (defun dashboard-links (list-size)
    (widget-create 'link
		   :notify (lambda (&rest ignore)
			     (zetteldeft-go-home))
		   :mouse-face 'highlight
		   :follow-link "\C-m"
		   "Home")
    (widget-create 'link
		   :notify (lambda (&rest ignore)
			     (find-file "~/emacs-config/mod/keybinding.org"))
		   :mouse-face 'highlight
		   :follow-link "\C-m"
		   "Keybindings")
    (widget-create 'link
		   :notify (lambda (&rest ignore)
			     (find-file "~/venn/run.R"))
		   :mouse-face 'highlight
		   :follow-link "\C-m"
		   "Venn")
    (widget-create 'link
		   :notify (lambda (&rest ignore)
			     (org-agenda-list))
		   :mouse-face 'highlight
		   :follow-link "\C-m"
		   "Agenda")
    (widget-create 'link
		   :notify (lambda (&rest ignore)
			     (find-file "~/emacs-config/config.org"))
		   :mouse-face 'highlight
		   :follow-link "\C-m"
		   "Configuration")
    )

  (defun dashboard-loaded-modules (list-size)
    (insert (concat dashboard-loaded-mods dashboard-missing-mods)))

  (defun dashboard-line (list-size)
    (insert "------------------------------------------------------------------------------------------"))

  (add-to-list 'dashboard-item-generators '(line . dashboard-line))
  (add-to-list 'dashboard-item-generators '(custom-links . dashboard-links))
  (add-to-list 'dashboard-item-generators '(custom-loaded-modules . dashboard-loaded-modules))
  (setq dashboard-items '((custom-loaded-modules) (custom-links)))
#+end_src

* Startup
#+begin_src emacs-lisp
  (when (member "Themes" loaded-modules)
    (set-day-night-theme))
  (cd "~/")
  (open-scratch)
  (dashboard-open)
#+end_src

