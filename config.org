#+STARTUP: content

Eivind Kjeka Broen
eivind.kb@hotmail.com

* Init Setup
The init.el (path ~/.emacs.d/init.el) file will redirect to this file if it contains the following code: 
(org-babel-load-file "~/emacs-config/config.org")
** suggested init.el
;; Set your cloud path here
(setq FOLDER_CLOUD "//path/to/cloud//")
;; loads the full config if the cloud is set
;; loads the lite init othwervise
(if (file-directory-p FOLDER_CLOUD)
    (org-babel-load-file "~/emacs-config/config.org")
  (load-file "~/emacs-config/init_lite.el"))

* Constants
#+begin_src emacs-lisp
;; shortcuts org and zettelkast
(setq FOLDER_TEMP (concat FOLDER_CLOUD "temp/"))
(setq FOLDER_ORG (concat FOLDER_CLOUD "org/"))
(setq FOLDER_ROAM (concat FOLDER_CLOUD "org/roam/"))
;; tokens
(setq ORG_TOKENS (concat FOLDER_CLOUD "org/tokens.org.gpg"))
;; agenda/capture
(setq ORG_BOOKMARKS (concat FOLDER_CLOUD "org/roam/2023-10-06-1320 Bookmarks.org"))
(setq ORG_HANDLELISTE (concat FOLDER_CLOUD "org/handleliste.org"))
(setq ORG_CAPTURE (concat FOLDER_CLOUD "org/capture.org"))
(setq ORG_DIARY (concat FOLDER_CLOUD "org/diary.org.gpg"))
(setq ORG_ROLODEX (concat FOLDER_CLOUD "org/rolodex.org"))
;; daily todos
(setq ORG_DAILY (concat FOLDER_CLOUD "org/daily.org"))
;; Misc
(setq WAV_BELL (concat FOLDER_CLOUD "bell.wav"))
(setq ORG_TIMELISTE (concat FOLDER_CLOUD "org/timeliste.org"))
(setq ORG_TEMP (concat FOLDER_CLOUD "org/temp.org"))
#+end_src
* Configuration
** Basic Customization
#+begin_src emacs-lisp
;;  (setq inhibit-startup-message t)    ;; Hide the startup message
  (setq debug-on-error t)             ;; enable in-depth message on error
  (setq ring-bell-function 'ignore)   ;; ignore annoying bell sounds while in emacs
  (tool-bar-mode -1)                  ;; removes ugly tool bar
  (menu-bar-mode -1)                  ;; removes menubar
#+end_src
** Encoding
#+begin_src emacs-lisp
  (set-language-environment "utf-8")
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (setq-default buffer-file-coding-system 'utf-8)
#+end_src
** Loading Modules
#+begin_src emacs-lisp
      ;; Function to load a module and measure the time
      (setq loaded-modules-with-time ())
  (defun load-module-and-measure-time (module file)
    (let* ((start-time (current-time))
	   (result (ignore-errors (org-babel-load-file file)))
	   (end-time (current-time))
	   (elapsed-time (if result (float-time (time-subtract end-time start-time)) 0.0))
	   (formatted-string (format "%.3fs - %s" elapsed-time module)))
      (if (member formatted-string loaded-modules-with-time)
	  loaded-modules-with-time
	(if (> elapsed-time 0)
	    (setq loaded-modules-with-time (cons formatted-string loaded-modules-with-time))
	  loaded-modules-with-time))))
      ;; Set expected modules
      (setq my-init-modules '("Keybinding" "Misc" "Functions" "EMMS" "Abbrev" "Mastodon" "Pandoc" "Themes" "Python" "R" "Company" "Agenda" "Zettelkasten" "Packages"))
      ;; Make a list of loaded modules
      (setq loaded-modules ())
      ;; Loading modules
      (load-module-and-measure-time "Packages" "~/emacs-config/mod/packages.org")
      (load-module-and-measure-time "Zettelkasten" "~/emacs-config/mod/zettelkasten.org")
      (load-module-and-measure-time "Agenda" "~/emacs-config/mod/agenda.org")
      (load-module-and-measure-time "Company" "~/emacs-config/mod/company.org")
      (load-module-and-measure-time "R" "~/emacs-config/mod/R.org")
      (load-module-and-measure-time "Python" "~/emacs-config/mod/python.org")
      (load-module-and-measure-time "Themes" "~/emacs-config/mod/themes.org")
      (load-module-and-measure-time "Pandoc" "~/emacs-config/mod/pandoc.org")
      (load-module-and-measure-time "Mastodon" "~/emacs-config/mod/mastodon.org")
      (load-module-and-measure-time "Abbrev" "~/emacs-config/mod/abbrev.org")
      (load-module-and-measure-time "EMMS" "~/emacs-config/mod/emms.org")
      (load-module-and-measure-time "Functions" "~/emacs-config/mod/functions.org")
      (load-module-and-measure-time "Misc" "~/emacs-config/mod/misc.org")
      (load-module-and-measure-time "Keybinding" "~/emacs-config/mod/keybinding.org")
#+end_src
* Dashboard
** Modules text
#+begin_src emacs-lisp
    ;; system text
    (setq dash-sys-text (concat "GNU Emacs " emacs-version "|" (symbol-name system-type)))
    ;; check completion and make text
    (let ((n-total-modules (length my-init-modules))
	  (n-loaded-modules (length loaded-modules)))
      (setq mydashtext-1 (format " LOADED INIT MODULES (%d/%d):\n\n    " n-loaded-modules n-total-modules)))
    ;; create list of loaded modules
    (setq loaded-modules-with-time (reverse loaded-modules-with-time))
    (setq dashboard-loaded-mods (concat mydashtext-1 (mapconcat 'identity loaded-modules-with-time "\n    ")))
    (setq list-missing-mods (cl-remove-if (lambda (item) (member item loaded-modules)) my-init-modules))

    (let ((n-total-modules (length my-init-modules))
	  (n-loaded-modules (length loaded-modules)))
    (if (< n-loaded-modules n-total-modules)
	(setq dashboard-missing-mods (concat "\n\n MISSING:\n\n    "(mapconcat 'identity list-missing-mods "\n    ")))
      (setq dashboard-missing-mods "")))


#+end_src
** Dashboard
#+begin_src emacs-lisp
  (require 'dashboard)
  ;; (dashboard-setup-startup-hook)
  ;; Set the banner
  (setq dashboard-startup-banner (concat FOLDER_CLOUD "emacs_startup.txt"))
  ;; Value can be
  ;; - nil to display no banner
  ;; - 'official which displays the official emacs logo
  ;; - 'logo which displays an alternative emacs logo
  ;; - 1, 2 or 3 which displays one of the text banners
  ;; - "path/to/your/image.gif", "path/to/your/image.png" or "path/to/your/text.txt" which displays whatever gif/image/text you would prefer
  ;; - a cons of '("path/to/your/image.png" . "path/to/your/text.txt")

  ;; put content in centre
  ;; (setq dashboard-center-content t)

  ;; Set the footer
  (setq dashboard-footer-messages (list (concat "Startup at: " (current-time-string))))
  ;; Set the title
  (setq dashboard-banner-logo-title dash-sys-text)
#+end_src
** Customization
#+begin_src emacs-lisp
  (defun dashboard-links (list-size)
    (widget-create 'link
		   :notify (lambda (&rest ignore)
			     (roam-home))
		   :mouse-face 'highlight
		   :follow-link "\C-m"
		   "Roam")
    (widget-create 'link
		   :notify (lambda (&rest ignore)
			     (find-file "~/emacs-config/mod/keybinding.org"))
		   :mouse-face 'highlight
		   :follow-link "\C-m"
		   "Keybindings")
    (widget-create 'link
		   :notify (lambda (&rest ignore)
			     (find-file "~/venn/run.R"))
		   :mouse-face 'highlight
		   :follow-link "\C-m"
		   "Venn")
    (widget-create 'link
		   :notify (lambda (&rest ignore)
			     (org-agenda-list))
		   :mouse-face 'highlight
		   :follow-link "\C-m"
		   "Agenda")
    (widget-create 'link
		   :notify (lambda (&rest ignore)
			     (find-file "~/emacs-config/config.org"))
		   :mouse-face 'highlight
		   :follow-link "\C-m"
		   "Configuration")
    (widget-create 'link
		   :notify (lambda (&rest ignore)
			     (open-org-temp))
		   :mouse-face 'highlight
		   :follow-link "\C-m"
		   "Temp")
    )
  (defun dashboard-loaded-modules (list-size)
    (insert (concat dashboard-loaded-mods dashboard-missing-mods)))

  (defun dashboard-line (list-size)
    (insert "------------------------------------------------------------------------------------------"))

  (add-to-list 'dashboard-item-generators '(line . dashboard-line))
  (add-to-list 'dashboard-item-generators '(custom-links . dashboard-links))
  (add-to-list 'dashboard-item-generators '(custom-loaded-modules . dashboard-loaded-modules))
  (setq dashboard-items '((custom-loaded-modules) (custom-links)))
#+end_src
* Startup
#+begin_src emacs-lisp
  (when (member "Themes" loaded-modules)
    (set-day-night-theme))
  (cd "~/")
  (open-scratch)
  (dashboard-open)
#+end_src

