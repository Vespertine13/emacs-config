#+STARTUP: content

Eivind Kjeka Broen
eivind.kb@hotmail.com

* Init Setup
The init.el (path ~/.emacs.d/init.el) file will redirect to this file if it contains the following code: 
(org-babel-load-file "~/emacs-config/config.org")
** suggested init.el
;; Set your cloud path here
(setq FOLDER_CLOUD "~/path/to/cloud/")

;; Load config 
;; init_lite.el is the basic config
(load-file "~/emacs-config/init_lite.el")

;; Load the rest of the config
;; select modules (optional)
;; (setq my-init-modules '("module1" "module2"))
(when (file-directory-p FOLDER_CLOUD) (org-babel-load-file ORG_CONFIG))

;; set window dimensions
(set-frame-height (selected-frame) 30)
(set-frame-width (selected-frame) 80)

;; set theme
(set-theme 'name-of-theme)
;; set font
(add-to-list 'default-frame-alist '(font . "Inconsolata-16"))

* Constants
#+begin_src emacs-lisp
;; shortcuts org and zettelkast
(setq FOLDER_AGENDA (concat FOLDER_CLOUD "org/agenda/"))
(setq FOLDER_ROAM (concat FOLDER_CLOUD "org/roam/"))
(setq FOLDER_UTILITIES (concat FOLDER_CLOUD "emacs_utilities/"))

;; tokens
(setq ORG_TOKENS (concat FOLDER_AGENDA "tokens.org.gpg"))
;; agenda/capture
(setq ORG_HANDLELISTE (concat FOLDER_AGENDA "handleliste.org"))
(setq ORG_CAPTURE (concat FOLDER_AGENDA "capture.org"))
(setq ORG_EVENTS (concat FOLDER_AGENDA "events.org"))
(setq ORG_DIARY (concat FOLDER_AGENDA "diary.org.gpg"))
(setq ORG_ROLODEX (concat FOLDER_AGENDA "rolodex.org"))
(setq ORG_TIMELISTE (concat FOLDER_AGENDA "timeliste.org"))
;; regular todos
(setq ORG_DAILY (concat FOLDER_AGENDA "daily.org"))
(setq ORG_MONTHLY (concat FOLDER_AGENDA "monthly.org"))
;; Misc
(setq WAV_BELL (concat FOLDER_UTILITIES "bell.wav"))
(setq ORG_TIMELISTE (concat FOLDER_AGENDA "timeliste.org"))
(setq TXT_TODAY (concat FOLDER_UTILITIES ".todaysdate"))
(setq TXT_MONTH (concat FOLDER_UTILITIES ".todaysmonth"))
#+end_src
* Paths
#+begin_src emacs-lisp
  ;; other path settings
  (add-to-list 'custom-theme-load-path (concat FOLDER_UTILITIES "themes/"))
#+end_src
* Encoding
#+begin_src emacs-lisp
  (set-language-environment "utf-8")
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (setq-default buffer-file-coding-system 'utf-8)
#+end_src
* Loading Modules
#+begin_src emacs-lisp
  ;; Function to load a module and measure the time
  (setq loaded-modules-with-time ())
  (defun load-module-and-measure-time (module file)
    (let* ((start-time (current-time))
	   (result (ignore-errors (org-babel-load-file file)))
	   (end-time (current-time))
	   (elapsed-time (if result (float-time (time-subtract end-time start-time)) 0.0))
	   (formatted-string (format "%.3fs - %s" elapsed-time module)))
      (if (member formatted-string loaded-modules-with-time)
	  loaded-modules-with-time
	(if (> elapsed-time 0)
	    (setq loaded-modules-with-time (cons formatted-string loaded-modules-with-time))
	  loaded-modules-with-time))))
  ;; Set expected modules
  (when (not (boundp 'my-init-modules))
    (setq my-init-modules '("packages" "setup-packages" "agenda" "undo-tree"  "zettelkasten" "flyspell" "company" "R" "python" "emms" "abbrev" "paste-fix" "mastodon" "elfeed")))
  ;; Make a list of loaded modules
  (setq loaded-modules ())
  ;; Loading modules
  (dolist (module my-init-modules)
    (setq module-file (concat "~/emacs-config/mods/" module ".org"))
    (load-module-and-measure-time module module-file))

#+end_src
* Dashboard
** Modules text
#+begin_src emacs-lisp
    ;; system text
    (setq dash-sys-text (concat "GNU Emacs " emacs-version "|" (symbol-name system-type)))
    ;; check completion and make text
    (let ((n-total-modules (length my-init-modules))
	  (n-loaded-modules (length loaded-modules)))
      (setq mydashtext-1 (format " LOADED INIT MODULES (%d/%d):\n\n    " n-loaded-modules n-total-modules)))
    ;; create list of loaded modules
    (setq loaded-modules-with-time (reverse loaded-modules-with-time))
    (setq dashboard-loaded-mods (concat mydashtext-1 (mapconcat 'identity loaded-modules-with-time "\n    ")))
    (setq list-missing-mods (cl-remove-if (lambda (item) (member item loaded-modules)) my-init-modules))

    (let ((n-total-modules (length my-init-modules))
	  (n-loaded-modules (length loaded-modules)))
    (if (< n-loaded-modules n-total-modules)
	(setq dashboard-missing-mods (concat "\n\n MISSING:\n\n    "(mapconcat 'identity list-missing-mods "\n    ")))
      (setq dashboard-missing-mods "")))
#+end_src
** Dashboard
#+begin_src emacs-lisp
  (require 'dashboard)
  ;; Set the banner
  (setq dashboard-startup-banner (concat FOLDER_CLOUD "emacs_utilities/emacs_startup.txt"))
  ;; Value can be
  ;; - nil to display no banner
  ;; - 'official which displays the official emacs logo
  ;; - 'logo which displays an alternative emacs logo
  ;; - 1, 2 or 3 which displays one of the text banners
  ;; - "path/to/your/image.gif", "path/to/your/image.png" or "path/to/your/text.txt" which displays whatever gif/image/text you would prefer
  ;; - a cons of '("path/to/your/image.png" . "path/to/your/text.txt")

  ;; put content in centre
  ;; (setq dashboard-center-content t)

  ;; Set the footer
  (setq dashboard-footer-messages (list (concat "Startup at: " (current-time-string))))
  ;; Set the title
  (setq dashboard-banner-logo-title dash-sys-text)
#+end_src
** Customization
#+begin_src emacs-lisp
  (defun dashboard-links (list-size)
    (widget-create 'link
		   :notify (lambda (&rest ignore)
			     (open-fancy-about-screen))
		   :mouse-face 'highlight
		   :follow-link "\C-m"
		   "Splash")
    (widget-create 'link
		   :notify (lambda (&rest ignore)
			     (mastodon))
		   :mouse-face 'highlight
		   :follow-link "\C-m"
		   "Mastodon")
    (widget-create 'link
		   :notify (lambda (&rest ignore)
			     (elfeed))
		   :mouse-face 'highlight
		   :follow-link "\C-m"
		   "Elfeed")
    (widget-create 'link
		   :notify (lambda (&rest ignore)
			     (scratch-buffer))
		   :mouse-face 'highlight
		   :follow-link "\C-m"
		   "Scratch")
    )
  (defun dashboard-loaded-modules (list-size)
    (insert (concat dashboard-loaded-mods dashboard-missing-mods)))

  (defun dashboard-line (list-size)
    (insert "------------------------------------------------------------------------------------------"))

  (add-to-list 'dashboard-item-generators '(line . dashboard-line))
  (add-to-list 'dashboard-item-generators '(custom-links . dashboard-links))
  (add-to-list 'dashboard-item-generators '(custom-loaded-modules . dashboard-loaded-modules))

  (setq dashboard-items '((custom-loaded-modules) (custom-links)))
#+end_src
* keybinding
#+begin_src emacs-lisp
  (global-set-key (kbd "<f5>") 'dashboard-open)
  (global-set-key (kbd "<f7>") 'menu-set-font)
  (global-set-key (kbd "<f8>") 'toggle-frame-solidity)
  (global-set-key (kbd "<f9>") 'scratch-buffer)
#+end_src 
* Startup
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(alpha-background  . 80)) ;; set buffer transparent
  (setq transparent-frame-enabled t)
  (dashboard-open)
#+end_src
