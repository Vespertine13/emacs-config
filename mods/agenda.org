#+STARTUP: content
* setup
General agenda settings.
#+begin_src emacs-lisp
(add-hook 'org-agenda-mode-hook (lambda () (visual-line-mode -1) (setq truncate-lines 1)))
(setq org-agenda-window-setup 'current-window)
#+end_src
* Capture and Agenda
Define agenda folders and capture templates
#+begin_src emacs-lisp
  ;; set org folder
  (setq org-agenda-files (list FOLDER_AGENDA))
  ;; defines today's date as a variable
  (setq today-scheduled (format-time-string "<%Y-%m-%d %a>"))
  (setq handleliste-agenda-content (concat "* TODO %? [/] "(format ":handle:\nSCHEDULED: %s\n:PROPERTIES:\n:CREATED:" today-scheduled) "%U\n:END:\n\n- [ ] "))
  (setq todo-agenda-content (concat "* TODO %? "(format "\nSCHEDULED: %s" today-scheduled)))
  (setq todo-event-content (concat "* TODO %? "(format ":event: \nSCHEDULED: %s\n:PROPERTIES:\n:PLACE:\n:TIME: " today-scheduled) "%U\n:END:\n"))
  (setq org-capture-templates
	`(("t" "TODO" entry (file ORG_CAPTURE)
	   , todo-agenda-content)
	  ("d" "Diary" entry (file+olp+datetree ORG_DIARY)
	   "* Dagen i går\n%?")
	  ("e" "Events" entry (file ORG_EVENTS)
	   , todo-event-content)
	  ("h" "Handleliste" entry (file ORG_HANDLELISTE)
	   , handleliste-agenda-content)
	  ("k" "Kontaktinfo" entry (file ORG_ROLODEX)
	   "* %? :contact:\n:PROPERTIES:\n:EMAIL: \n:TELEPHONE: \n:ORGANIZATION: \n:NOTE: \n:END:\n")
	  ))
    ;; Org todo workflow
    (setq org-todo-keywords'((sequence "TODO" "|" "DONE")))
#+end_src
* Regular TODOS
TODOs that reset regularly are defined here. they check the current date and overwrite the relevant agenda org file with fresh TODOS.
** Daily TODOS
Here the TODOS that reset daily are defined.
#+begin_src emacs-lisp
  ;; text and variables
  (setq today-var (format-time-string "%Y-%m-%d"))
  (let (
	(daily-end (format "* TODO [#A] Slutt arbeidsdag [0/4]\nSCHEDULED: %s
    - [ ] Sjekk slack
    - [ ] Sjekk groove (including notifications)
    - [ ] git push
    - [ ] Stemple ut\n" today-scheduled))
	    (daily-start (format "* TODO [#A] Start arbeidsdag [0/6]\nSCHEDULED: %s
    - [ ] Stemple inn
    - [ ] git pull
    - [ ] sjekk kalender (uio, hotmail)
    - [ ] sjekk citrix (teams og ous)
    - [ ] Sjekk groove
    - [ ] Standup (skriv i slack)\n" today-scheduled))
	    (daily-diary (format "* TODO [#C] Skriv dagbok\nSCHEDULED: %s\n" today-scheduled))
	    (daily-piano (format "* TODO [#C] Spill piano\nSCHEDULED: %s\n" today-scheduled))
	    (daily-languages (format "* TODO [#C] Språkapper [0/3]\nSCHEDULED: %s
    - [ ] Toleio
    - [ ] Japansk
    - [ ] Spansk\n" today-scheduled))
	    )
	(setq daily-todos (concat daily-start daily-end daily-diary daily-piano daily-languages)))
      ;; run checks and replace
      ;; check if today's date file exists, if not it creates an empty file
      (unless (file-exists-p TXT_TODAY)
	(create-empty-file TXT_TODAY))
      (unless (file-exists-p ORG_DAILY)
	(create-empty-file ORG_DAILY))
      (when (not (file-content-equal-to-string TXT_TODAY today-var))
	(replace-file-contents TXT_TODAY today-var)
	(replace-file-contents ORG_DAILY daily-todos))
#+end_src
** Monthly TODOS
Here the TODOS that reset monthly are defined.
#+begin_src emacs-lisp
    (setq this-month-var (format-time-string "%Y-%m"))
    (let (
	  (monthly-water-plants-home (format "* TODO [#C] Vann planter hjemme\nSCHEDULED: %s\n" today-scheduled))
	  (monthly-water-plants-work (format "* TODO [#C] Vann planter på jobb\nSCHEDULED: %s\n" today-scheduled))
	  (monthly-vitamin-d (format "* TODO [#A] Vitamin-D\nSCHEDULED: %s\n" today-scheduled))
	  (monthly-vim (format "* TODO [#B] Practise VIM\nSCHEDULED: %s\n" today-scheduled))
	  (monthly-tune-watch (format "* TODO [#C] Skru opp og still klokka\nSCHEDULED: %s" today-scheduled))
	  )
      (setq monthly-todos (concat monthly-water-plants-home monthly-water-plants-work monthly-vitamin-d monthly-vim monthly-tune-watch)))
    ;; run checks and replace
    ;; check if this month file exists, if not it creates an empty file
    (unless (file-exists-p TXT_MONTH)
      (create-empty-file TXT_MONTH))
    (unless (file-exists-p ORG_MONTHLY)
      (create-empty-file ORG_MONTHLY))
    (when (not (file-content-equal-to-string TXT_MONTH this-month-var))
      (replace-file-contents TXT_MONTH this-month-var)
      (replace-file-contents ORG_MONTHLY monthly-todos))

#+end_src
* org crypt
Settings used for when encryption keys are needed.

~org-crypt-key~
GPG key to use for encryption.
nil means  use symmetric encryption unconditionally.
"" means use symmetric encryption unless heading sets CRYPTKEY property.
#+begin_src emacs-lisp
(require 'org-crypt)
(org-crypt-use-before-save-magic)
(setq org-tags-exclude-from-inheritance '("crypt"))
(setq org-crypt-key nil)
#+end_src 
* Visuals
These settings make the org agenda colors a bit more chill.
#+begin_src emacs-lisp
  (custom-set-faces
   '(org-scheduled-today ((t (:inherit default))))
   '(org-scheduled-previously ((t (:inherit default))))
   '(org-agenda-done ((t (:inherit default))))
   '(org-done ((t (:inherit default))))
   '(org-headline-done ((t (:inherit org-level-1))))
   '(org-todo ((t (:inherit org-agenda-date))))
   '(org-done ((t (:inherit default))))
   )
#+end_src
* Keybinding
Keybinding for org agenda.
#+begin_src emacs-lisp
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c c") 'org-capture)
#+end_src
* loaded-modules
Register that the module has been loaded for the Dashboard.
#+begin_src emacs-lisp
  (add-to-list 'loaded-modules "agenda")
#+end_src
