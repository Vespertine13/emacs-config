#+STARTUP: content
* setup
#+begin_src emacs-lisp
(add-hook 'org-agenda-mode-hook (lambda () (visual-line-mode -1) (setq truncate-lines 1)))
#+end_src
* Capture and Agenda
#+begin_src emacs-lisp
  ;; set org folder
  (setq org-agenda-files (list FOLDER_ORG))
  ;; defines today's date as a variable
  (setq today-scheduled (format-time-string "<%Y-%m-%d %a>"))
  (setq handleliste-agenda-content (concat "* TODO %? [/] "(format ":handle:\nSCHEDULED: %s\n:PROPERTIES:\n:CREATED:" today-scheduled) "%U\n:END:\n\n- [ ] "))
  (setq todo-agenda-content (concat "* TODO %? "(format "\nSCHEDULED: %s" today-scheduled)))
  (setq todo-event-content (concat "* TODO %? "(format ":event: \nSCHEDULED: %s\n:PROPERTIES:\n:TIME: \n:PLACE: \n:NOTE:" today-scheduled) "%U\n:END:\n"))
  (setq org-capture-templates
	`(("t" "TODO" entry (file ORG_CAPTURE)
	   , todo-agenda-content)
	  ("d" "Diary" entry (file+olp+datetree ORG_DIARY)
	   "* Dagen i g√•r\n%?")
	  ("e" "Events" entry (file ORG_EVENTS)
	   , todo-event-content)
	  ("h" "Handleliste" entry (file ORG_HANDLELISTE)
	   , handleliste-agenda-content)
	  ("k" "Kontaktinfo" entry (file ORG_ROLODEX)
	   "* %? :contact:\n:PROPERTIES:\n:EMAIL: \n:TELEPHONE: \n:ORGANIZATION: \n:NOTE: \n:END:\n")
	  ))
    ;; Org todo workflow
    (setq org-todo-keywords'((sequence "TODO" "|" "DONE")))
    ;; custom function
    (defun open-org-agenda-for-current-week ()
      (interactive)
      (let ((current-prefix-arg '(4)))
	(call-interactively 'org-agenda-list))
      (message "Opening agenda for current week"))
#+end_src
* Daily Todos
#+begin_src emacs-lisp
    ;; functions
    (defun replace-file-contents (file-path new-content)
      "Replace the contents of the FILE-PATH with NEW-CONTENT."
      (with-temp-file file-path
	(insert new-content)))
    (defun create-empty-file (file-path)
      "Create an empty file at FILE-PATH."
      (write-region "" nil file-path))
    (defun file-content-equal-to-string (file string)
      "Check if the content of FILE is equal to STRING."
      (with-temp-buffer
	(insert-file-contents file)
	(string= (buffer-string) string)))
    ;; text and variables
    (setq today-var (format-time-string "%Y-%m-%d"))
    (let (
	  (daily-end (format "* TODO [#A] Slutt arbeidsdag [0/4]\nSCHEDULED: %s
  - [ ] Sjekk slack
  - [ ] Sjekk groove
  - [ ] git push
  - [ ] Stemple ut\n" today-scheduled))
	  (daily-start (format "* TODO [#A] Start arbeidsdag [0/6]\nSCHEDULED: %s
  - [ ] Stemple inn
  - [ ] git pull
  - [ ] sjekk kalender (uio, hotmail)
  - [ ] sjekk citrix (teams og ous)
  - [ ] Sjekk groove
  - [ ] Standup (skriv i slack)\n" today-scheduled))
	  (daily-diary (format "* TODO [#C] Skriv dagbok\nSCHEDULED: %s" today-scheduled))
	  )
      (setq daily-todos (concat daily-start daily-end daily-diary)))
    ;; run checks and replace
    ;; check if today's date file exists, if not it creates an empty file
    (unless (file-exists-p TXT_TODAY)
      (create-empty-file TXT_TODAY))
    (when (not (file-content-equal-to-string TXT_TODAY today-var))
      (replace-file-contents TXT_TODAY today-var)
      (replace-file-contents ORG_DAILY daily-todos))
#+end_src
* Visuals
Make the org mode a bit more chill.
# refiojreoig
#+begin_src emacs-lisp
  (custom-set-faces
   '(org-scheduled-today ((t (:inherit default))))
   '(org-scheduled-previously ((t (:inherit default))))
   '(org-agenda-done ((t (:inherit default))))
   '(org-done ((t (:inherit default))))
   '(org-headline-done ((t (:inherit org-level-1))))
   '(org-todo ((t (:inherit org-agenda-date))))
   '(org-done ((t (:inherit default))))
   )
;; wdok
#+end_src
* loaded-modules
#+begin_src emacs-lisp
  (add-to-list 'loaded-modules "Agenda")
#+end_src

