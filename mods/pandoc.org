#+STARTUP: overview
* Pandoc Settings
#+begin_src emacs-lisp
  ;; for ubuntu
  (when (string-equal system-type "gnu/linux")
    (defun pandoc-convert ()
      "Prompt for input and output paths, and convert using pandoc."
      (interactive)
      (let* ((input_var (read-file-name "Enter input document: "))
	     (output_var (read-file-name "Enter output document: ")))
	;; Check if input file exists
	(unless (file-exists-p input_var)
	  (message "Input file does not exist.")
	  (return))
	;; Check if output file exists
	(when (file-exists-p output_var)
	  (unless (yes-or-no-p "Output file already exists. Override? ")
	    (message "Conversion cancelled.")
	    (return)))
	(shell-command-to-string (format "pandoc -o \"%s\" \"%s\"" output_var input_var))
	(find-file output_var))))
  ;; for windows
  (when (string-equal system-type "windows-nt")
    (defun pandoc-convert ()
      "Prompt for input and output paths, and convert using pandoc."
      (interactive)
      (let* ((input_var (read-file-name "Enter input document: "))
	     (output_var (read-file-name "Enter output document: "))
	     (replacement-directory BASE_PATH))
	;; Check if input file exists
	(unless (file-exists-p input_var)
	  (message "Input file does not exist.")
	  (return))
	(setq input_var (replace-regexp-in-string "^~" replacement-directory input_var))
	(setq output_var (replace-regexp-in-string "^~" replacement-directory output_var))
	;; Replace forward slashes with backslashes
	(setq input_var (replace-regexp-in-string "/" "\\\\" input_var))
	(setq output_var (replace-regexp-in-string "/" "\\\\" output_var))
	;; Check if output file exists
	(when (file-exists-p output_var)
	  (unless (yes-or-no-p "Output file already exists. Override? ")
	    (message "Conversion cancelled.")
	    (return)))
	(shell-command-to-string (format "pandoc -o \"%s\" \"%s\"" output_var input_var))
	(find-file output_var))))
#+end_src
* loaded-modules
#+begin_src emacs-lisp
  (add-to-list 'loaded-modules "Pandoc")
#+end_src
